version: "3.9"

services:
  caddy-waf:
    build: ./../docker/caddy # built with coraza-caddy + tracing
    ports:
      - "80:80"
      - "443:443"
    networks: [edge]
    volumes:
      - waf_rules:/etc/coraza:ro
      - waf_sites:/etc/caddy/sites:ro
      - caddy_data:/data
      - caddy_config:/config
      - type: tmpfs,source=caddy_admin_run,target=/run/caddy-admin
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    environment:
      - OTEL_SERVICE_NAME=waf-edge
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_RESOURCE_ATTRIBUTES=deployment=swarm,component=caddy
    deploy:
      replicas: 2
      placement: { constraints: ["node.role == manager"] }
      restart_policy: { condition: on-failure }

  waf-admin:
    build: .. # the OSS microservice you just built
    environment:
      - WAF_ADMIN_CONFIG=/app/config.yaml
    networks: [edge]
    ports:
      - "8080:8080" # lock this down in your firewall
    volumes:
      - waf_rules:/etc/coraza
      - waf_sites:/etc/caddy/sites
      - type: tmpfs,source=caddy_admin_run,target=/run/caddy-admin
      - ./waf-admin-config.yaml:/app/config.yaml:ro
    deploy:
      replicas: 1
      placement: { constraints: ["node.role == manager"] }
      restart_policy: { condition: on-failure }

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.106.0
    networks: [edge]
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - otel_config:/etc/otelcol
    deploy:
      replicas: 1
      placement: { constraints: ["node.role == manager"] }

networks:
  edge:
    driver: overlay

volumes:
  waf_rules: {}
  waf_sites: {}
  caddy_data: {}
  caddy_config: {}
  caddy_admin_run:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: "size=16m,uid=0,gid=0,mode=0755"
  otel_config: {}
